name: firelight-ghp

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  packages: read

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

jobs:

  build-ruby:
    runs-on: ubuntu-latest
    name: "Build MN with Ruby"
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      # In case of cache miss, the generate MN XML step will run
      # and the cache will be filled after job finishes.
      # Next time it’ll be a cache hit, unless sources changed.
      # See also “Upload cached Metanorma XML” step, which is important.
      - name: Restore cached Metanorma XML, if any
        id: cache-mn-xml
        uses: actions/cache@v4
        env:
          cache-name: mn-fl-cache
        with:
          path: sources/si-brochure

          # NOTE: cache key does not include current MN version,
          # which means if sources did not change but it’s desirable
          # to rebuild XML using a newer MN version it may be impossible to do
          # without making a dummy/meaningless change in the content
          # to change the hash.
          #
          # The proper way to address this could be pinning MN version
          # somewhere and including it as part of the hash here;
          # alternatively, if we really want to always use whatever MN version
          # is latest, we could detect that version and include it
          # as part of this key.
          key: ${{ runner.os }}-mn-${{ env.cache-name }}-${{ hashFiles('sources/si-brochure/3.01/**') }}

          # We can fuzzy-match latest available cache,
          # instead of precise hash.
          # This can speed up build in some scenarios,
          # but can in theory also cause issues where XML is not updated
          # after source changes.
          # restore-keys: |
          #   ${{ runner.os }}-mn-${{ env.cache-name }}-
          #   ${{ runner.os }}-mn-
          #   ${{ runner.os }}-- uses: ruby/setup-ruby@v1

      # Only run these tree if there is no cache hit
      - uses: ruby/setup-ruby@v1
        if: steps.cache-mn-xml.outputs.cache-hit != 'true'
        with:
          ruby-version: '3.3'
      # Strip unneeded output formats
      - run: grep -Ev '^  - pdf|^  - html' sources/si-brochure/3.01/collection.yml > sources/si-brochure/3.01/collection-xml-only.yml
      - run: bundle install
        if: steps.cache-mn-xml.outputs.cache-hit != 'true'
      - run: bundle exec metanorma collection --agree-to-terms sources/si-brochure/3.01/collection-xml-only.yml
        if: steps.cache-mn-xml.outputs.cache-hit != 'true'
        # Output will be under sources/si-brochure/3.01/brochure

      # In case of cache hit, we must explicitly upload the _site dir as artifact
      - name: Upload cached Metanorma XML
        uses: actions/upload-artifact@v4
        if: steps.cache-mn-xml.outputs.cache-hit == 'true'
        with:
          name: mn-fl
          path: sources/si-brochure
          if-no-files-found: error

  # build-docker:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: metanorma/metanorma:latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         submodules: true

  #     - name: Print Metanorma version
  #       run: metanorma --version

  #     - name: Cache or generate Metanorma XML
  #       uses: actions-mn/build-and-publish@v2
  #       with:
  #         agree-to-terms: true
  #         destination: artifact
  #         artifact-name: mn-fl
  #         cache-extra-input: |
  #           sources/si-brochure/3.01/**

  #         # TODO: What does cache-site-for-manifest mean? Is this correct?
  #         cache-site-for-manifest: metanorma.yml

  #         # TODO: We only want to build the SI brochure version 3.01

  fl-build:
    runs-on: ubuntu-latest
    needs: build-ruby
    strategy:
      matrix:
        env:
          - { name: 'ghp (repo prefix)', prefix: '/mn-samples-bipm/' }
          - { name: 'local (no prefix)', prefix: '/' }
        document:
          - { dir: '3.01/brochure', url: 'si-brochure-3.01' }

    name: Firelight build - Document ${{ matrix.document.dir }} for ${{ matrix.env.name }}

    steps:
      - name: Download Metanorma artifacts
        uses: actions/download-artifact@v4
        with:
          name: mn-fl

      - name: "Firelight: create temporary Git repo"
        run: |
          git config --global user.email "57123902+metanorma-ci@users.noreply.github.com"
          git config --global user.name "Metanorma CI"
          git config --global init.defaultBranch main
          git init .

      - name: "Firelight: commit document ${{ matrix.document.dir }}"
        run: |
          git add documents/${{ matrix.document.dir }}/collection.presentation.xml
          git commit -m "Commit presentation XML"

      - name: "Firelight: prepare config for document ${{ matrix.document.dir }}"
        run: |
          cat <<'EOF' >> anafero-config.json
          {
            "version": "0.1",
            "entryPoint": "file:documents/${{ matrix.document.dir }}/collection.presentation.xml",
            "storeAdapters": [
              "git+https://github.com/metanorma/firelight#main/packages/metanorma-xml-store"
            ],
            "contentAdapters": [
              "git+https://github.com/metanorma/firelight#main/packages/metanorma-site-content"
            ],
            "resourceLayouts": [
              "git+https://github.com/metanorma/firelight#main/packages/plateau-layout"
            ]
          }
          EOF
          git add anafero-config.json
          git commit -m "Add build config for ${{ matrix.document.dir }}"

      - name: "Firelight: generate HTML for doc ${{ matrix.document.dir }}"
        run: |
          npx --node-options='--experimental-vm-modules' \
            -y @riboseinc/anafero-cli@0.0.51 build-site \
            --target-dir dist/${{ matrix.document.url }} \
            --path-prefix ${{ matrix.env.prefix }}${{ matrix.document.url }} \
            --current-rev main

      - uses: actions/upload-artifact@v4
        with:
          name: fl-${{ matrix.env.name }}-${{ matrix.document.dir }}
          path: dist
          if-no-files-found: error

  deploy-pages:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: fl-build
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Make dist dir
        run: mkdir dist

      - name: Download HTML artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: fl-ghp-*
          path: dist
          merge-multiple: true

      - name: List files in dist
        run: ls -l dist

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
